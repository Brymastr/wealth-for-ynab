AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Wealth for YNAB

Globals:
  Function:
    Timeout: 15

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'DELETE,GET,OPTIONS,HEAD,PATCH,PUT,POST'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,wealth-session-token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      Auth:
        ApiKeyRequired: false
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for this API
          Quota:
            Limit: 50
            Period: DAY
          Throttle:
            BurstLimit: 100
            RateLimit: 50

  Logout:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/main
      DockerBuildArgs:
        FUNCTION_NAME: logout
        FUNCTION_SCOPE: other
    Properties:
      PackageType: Image
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /auth/logout
            Method: GET

  VerifySession:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/main
      DockerBuildArgs:
        FUNCTION_NAME: verifyToken
        FUNCTION_SCOPE: other
    Properties:
      PackageType: Image
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionStore
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /auth/verify/{sessionToken}
            Method: POST

  # YNAB
  YnabLogin:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/main
      DockerBuildArgs:
        FUNCTION_NAME: login
        FUNCTION_SCOPE: ynab
    Properties:
      PackageType: Image
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: YNAB/*
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /auth/ynab/login
            Method: GET

  YnabToken:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/main
      DockerBuildArgs:
        FUNCTION_NAME: token
        FUNCTION_SCOPE: ynab
    Properties:
      PackageType: Image
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: YNAB/*
        - SSMParameterReadPolicy:
            ParameterName: YNAB/ClientId
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionStore
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /auth/ynab/token
            Method: GET

  YnabGetBudgets:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/main
      Dockerfile: Dockerfile
      DockerBuildArgs:
        FUNCTION_NAME: getBudgets
        FUNCTION_SCOPE: ynab
    Properties:
      PackageType: Image
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: YNAB/*
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionStore
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /ynab/budgets
            Method: GET

  YnabGetAccounts:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/main
      Dockerfile: Dockerfile
      DockerBuildArgs:
        FUNCTION_NAME: getAccounts
        FUNCTION_SCOPE: ynab
    Properties:
      PackageType: Image
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: YNAB/*
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionStore
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /ynab/budgets/{budget_id}/accounts
            Method: GET

  YnabGetMonthlyNetWorth:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/main
      Dockerfile: Dockerfile
      DockerBuildArgs:
        FUNCTION_NAME: getMonthlyNetWorth
        FUNCTION_SCOPE: ynab
    Properties:
      PackageType: Image
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: YNAB/*
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionStore
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /ynab/budgets/{budget_id}/monthlyNetWorth
            Method: GET

  YnabGetMonthlyNetWorthForAccount:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/main
      Dockerfile: Dockerfile
      DockerBuildArgs:
        FUNCTION_NAME: getMonthlyNetWorthForAccount
        FUNCTION_SCOPE: ynab
    Properties:
      PackageType: Image
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: YNAB/*
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionStore
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /ynab/budgets/{budget_id}/accounts/{account_id}/monthlyNetWorth
            Method: GET

  YnabGetDailyNetWorth:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/main
      Dockerfile: Dockerfile
      DockerBuildArgs:
        FUNCTION_NAME: getDailyNetWorth
        FUNCTION_SCOPE: ynab
    Properties:
      PackageType: Image
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: YNAB/*
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionStore
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /ynab/budgets/{budget_id}/dailyNetWorth
            Method: GET

  Forecast:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/forecast
      Dockerfile: Dockerfile
    Properties:
      PackageType: Image
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /forecast
            Method: GET

  SessionStore:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: HashKey
          AttributeType: "S"
        - AttributeName: RangeKey
          AttributeType: "S"
        - AttributeName: UserId
          AttributeType: "S"
        - AttributeName: SessionToken
          AttributeType: "S"
      KeySchema:
        - AttributeName: HashKey
          KeyType: HASH
        - AttributeName: RangeKey
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: AuthIndex
          KeySchema:
            - AttributeName: RangeKey
              KeyType: HASH
            - AttributeName: UserId
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - AccessToken
              - RefreshToken
              - TokenType
              - Expiration
            ProjectionType: INCLUDE
        - IndexName: SessionIndex
          KeySchema:
            - AttributeName: RangeKey
              KeyType: HASH
            - AttributeName: SessionToken
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - SessionStart
              - Expiration
            ProjectionType: INCLUDE

      

Outputs:
  ApiUrl:
    Description: API Endpoint
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod"
