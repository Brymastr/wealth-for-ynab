AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Wealth for YNAB

Parameters:
  HostedZoneId:
    Description: hosted zone for domain name
    Type: String

  DomainName:
    Description: domain name
    Type: String

  Environment:
    Description: dev | prod
    Default: dev
    Type: String
    

Globals:
  Function:
    Timeout: 15
    Environment:
      Variables:
        Environment: !Ref Environment
    

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'DELETE,GET,OPTIONS,HEAD,PATCH,PUT,POST'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,wealth-session-token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      Auth:
        ApiKeyRequired: false
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for this API
          Quota:
            Limit: 50
            Period: DAY
          Throttle:
            BurstLimit: 100
            RateLimit: 50

  Logout:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/main
      Dockerfile: Dockerfile
      DockerBuildArgs:
        FUNCTION_NAME: logout
        FUNCTION_SCOPE: other
    Properties:
      PackageType: Image
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /auth/logout
            Method: GET

  VerifySession:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/main
      Dockerfile: Dockerfile
      DockerBuildArgs:
        FUNCTION_NAME: verifyToken
        FUNCTION_SCOPE: other
    Properties:
      PackageType: Image
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionStore
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /auth/verify/{sessionToken}
            Method: POST

  # YNAB
  YnabLogin:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/main
      Dockerfile: Dockerfile
      DockerBuildArgs:
        FUNCTION_NAME: login
        FUNCTION_SCOPE: ynab
    Properties:
      PackageType: Image
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: YNAB/*
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /auth/ynab/login
            Method: GET

  YnabToken:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/main
      Dockerfile: Dockerfile
      DockerBuildArgs:
        FUNCTION_NAME: token
        FUNCTION_SCOPE: ynab
    Properties:
      PackageType: Image
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: YNAB/*
        - SSMParameterReadPolicy:
            ParameterName: YNAB/ClientId
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionStore
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /auth/ynab/token
            Method: GET

  YnabGetBudgets:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/main
      Dockerfile: Dockerfile
      DockerBuildArgs:
        FUNCTION_NAME: getBudgets
        FUNCTION_SCOPE: ynab
    Properties:
      PackageType: Image
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: YNAB/*
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionStore
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /ynab/budgets
            Method: GET

  YnabGetAccounts:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/main
      Dockerfile: Dockerfile
      DockerBuildArgs:
        FUNCTION_NAME: getAccounts
        FUNCTION_SCOPE: ynab
    Properties:
      PackageType: Image
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: YNAB/*
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionStore
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /ynab/budgets/{budget_id}/accounts
            Method: GET

  YnabGetNetWorth:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/main
      Dockerfile: Dockerfile
      DockerBuildArgs:
        FUNCTION_NAME: getNetWorth
        FUNCTION_SCOPE: ynab
    Properties:
      PackageType: Image
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: YNAB/*
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionStore
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /ynab/budgets/{budget_id}/netWorth/{granularity}
            Method: GET

  YnabGetNetWorthForAccount:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/main
      Dockerfile: Dockerfile
      DockerBuildArgs:
        FUNCTION_NAME: getNetWorthForAccount
        FUNCTION_SCOPE: ynab
    Properties:
      PackageType: Image
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: YNAB/*
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionStore
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /ynab/budgets/{budget_id}/accounts/{account_id}/netWorth/{granularity}
            Method: GET

  Forecast:
    Type: AWS::Serverless::Function
    Metadata:
      DockerTag: latest
      DockerContext: api/forecast
      Dockerfile: Dockerfile
    Properties:
      PackageType: Image
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /forecast
            Method: POST

  SessionStore:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub Users-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: HashKey
          AttributeType: "S"
        - AttributeName: RangeKey
          AttributeType: "S"
        - AttributeName: UserId
          AttributeType: "S"
        - AttributeName: SessionToken
          AttributeType: "S"
      KeySchema:
        - AttributeName: HashKey
          KeyType: HASH
        - AttributeName: RangeKey
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: AuthIndex
          KeySchema:
            - AttributeName: RangeKey
              KeyType: HASH
            - AttributeName: UserId
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - AccessToken
              - RefreshToken
              - TokenType
              - Expiration
            ProjectionType: INCLUDE
        - IndexName: SessionIndex
          KeySchema:
            - AttributeName: RangeKey
              KeyType: HASH
            - AttributeName: SessionToken
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - SessionStart
              - Expiration
            ProjectionType: INCLUDE

  # Website
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:Get*
              - s3:List*
              - s3:DeleteObject
            Resource:
              - !Sub "arn:aws:s3:::${WebsiteBucket}"
              - !Sub "arn:aws:s3:::${WebsiteBucket}/*"
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"
  
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Serverless website OA"

  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2019
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        CustomErrorResponses:
          - ErrorCode: 400
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 405
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 414
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 416
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: true
          Compress: true
          TargetOriginId: s3-website
          ViewerProtocolPolicy: redirect-to-https
        Origins:
          - Id: s3-website
            DomainName: !GetAtt WebsiteBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"

Outputs:
  ApiUrl:
    Description: API Endpoint
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  WebsiteBucketName:
    Description: Bucket name
    Value: !Ref WebsiteBucket
  WebsiteBucketDomainName:
    Description: Bucket domain
    Value: !GetAtt WebsiteBucket.DomainName
  CloudFrontDistributionURL:
    Description: CloudFront URL for the website
    Value: !Join
      - ""
      - - "https://"
        - !GetAtt CloudfrontDistribution.DomainName
